import os
import logging
import tempfile
import requests
import aiohttp
import asyncio
import json
import re
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
from telegram.constants import ChatAction
import subprocess

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥ ---
NEUROAPI_API_KEY = os.getenv('NEUROAPI_API_KEY')
NEUROAPI_URL = 'https://neuroapi.host/v1/chat/completions'
MODEL = 'gemini-2.5-pro'

folder_id = os.getenv('YC_FOLDER_ID') or os.getenv('YANDEX_FOLDER_ID')
# iam_token —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
iam_token = None

# Yandex Art API
YANDEX_ART_URL = 'https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync'
YANDEX_OPERATIONS_URL = 'https://llm.api.cloud.yandex.net/operations'

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ yc CLI ---
def fetch_iam_token():
    try:
        result = subprocess.run(['yc', 'iam', 'create-token'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=20)
        if result.returncode == 0:
            token = result.stdout.strip()
            if token:
                logging.info('IAM —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ yc CLI')
                return token
            else:
                logging.error('–ü—É—Å—Ç–æ–π IAM —Ç–æ–∫–µ–Ω –æ—Ç yc CLI')
        else:
            logging.error(f'–û—à–∏–±–∫–∞ yc CLI: {result.stderr}')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {e}')
    return None

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ---
from apscheduler.schedulers.background import BackgroundScheduler
import threading
import pytz

def schedule_iam_token_update():
    global iam_token
    def update_token():
        global iam_token
        token = fetch_iam_token()
        if token:
            iam_token = token
    update_token()  # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    scheduler = BackgroundScheduler(timezone=pytz.UTC)
    scheduler.add_job(update_token, 'interval', hours=24)
    scheduler.start()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ ---
HEROES = [
    ("üê∞ –ó–∞–π—á–∏–∫", "–∑–∞–π—á–∏–∫"),
    ("üëß –î–µ–≤–æ—á–∫–∞", "–¥–µ–≤–æ—á–∫–∞"),
    ("üêâ –î—Ä–∞–∫–æ–Ω—á–∏–∫", "–¥—Ä–∞–∫–æ–Ω—á–∏–∫"),
    ("ü§ñ –†–æ–±–æ—Ç", "—Ä–æ–±–æ—Ç"),
    ("üêª –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "–º–µ–¥–≤–µ–∂–æ–Ω–æ–∫"),
    ("‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", "custom")
]
PLACES = [
    ("üå≤ –ó–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω—ã–π –ª–µ—Å", "–∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω—ã–π –ª–µ—Å"),
    ("üè∞ –í–æ–ª—à–µ–±–Ω—ã–π –∑–∞–º–æ–∫", "–≤–æ–ª—à–µ–±–Ω—ã–π –∑–∞–º–æ–∫"),
    ("üöÄ –ú–∏—Ä –±—É–¥—É—â–µ–≥–æ", "–º–∏—Ä –±—É–¥—É—â–µ–≥–æ"),
    ("üèùÔ∏è –û—Å—Ç—Ä–æ–≤ —Å–æ–∫—Ä–æ–≤–∏—â", "–æ—Å—Ç—Ä–æ–≤ —Å–æ–∫—Ä–æ–≤–∏—â"),
    ("‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", "custom")
]
MOODS = [
    ("üòå –°–ø–æ–∫–æ–π–Ω–æ–µ", "—Å–ø–æ–∫–æ–π–Ω–æ–µ"),
    ("‚ú® –í–æ–ª—à–µ–±–Ω–æ–µ", "–≤–æ–ª—à–µ–±–Ω–æ–µ"),
    ("üòÑ –í–µ—Å—ë–ª–æ–µ", "–≤–µ—Å—ë–ª–æ–µ"),
    ("üìö –ü–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–µ", "–ø–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–µ"),
    ("ü™ê –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ"),
    ("üëª –°—Ç—Ä–∞—à–Ω–æ–µ", "—Å—Ç—Ä–∞—à–Ω–æ–µ")
]
AGES = [
    ("üë∂ –ú–∞–ª—ã—à", "–º–∞–ª—ã—à"),
    ("üßí –†–µ–±—ë–Ω–æ–∫", "—Ä–µ–±—ë–Ω–æ–∫"),
    ("üßë –ü–æ–¥—Ä–æ—Å—Ç–æ–∫", "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫"),
    ("üßî –í–∑—Ä–æ—Å–ª—ã–π", "–≤–∑—Ä–æ—Å–ª—ã–π")
]
LENGTHS = [
    ("üìè –ö–æ—Ä–æ—Ç–∫–∞—è", "short"),
    ("üìñ –°—Ä–µ–¥–Ω—è—è", "medium"),
    ("üßæ –î–ª–∏–Ω–Ω–∞—è", "long")
]


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
USER_STATE = {}

# --- –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
USER_STORY = {}

# --- –•–µ–ª–ø–µ—Ä—ã ---
def build_keyboard(options):
    keyboard = [[InlineKeyboardButton(text, callback_data=val)] for text, val in options]
    return InlineKeyboardMarkup(keyboard)

def reset_user(user_id):
    USER_STATE[user_id] = {
        'step': 'hero',
        'hero': None,
        'place': None,
        'mood': None,
        'age': None,
        'length': None
    }

def get_prompt(state):
    length_map = {
        'short': 250,
        'medium': 550,
        'long': 1000
    }
    length_label = {
        'short': '–∫–æ—Ä–æ—Ç–∫–∞—è',
        'medium': '—Å—Ä–µ–¥–Ω—è—è',
        'long': '–¥–ª–∏–Ω–Ω–∞—è'
    }
    words = length_map.get(state.get('length'), 500)
    label = length_label.get(state.get('length'), '–∫–æ—Ä–æ—Ç–∫–∞—è')
    return (
        f"–ü—Ä–∏–¥—É–º–∞–π {label} —Å–∫–∞–∑–∫—É –Ω–∞ –Ω–æ—á—å –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞: {state['age']}. "
        f"–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π: {state['hero']}. –ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: {state['place']}. "
        f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {state['mood']}. –°–¥–µ–ª–∞–π —Å–∫–∞–∑–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π, –¥–æ–±—Ä–æ–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è —Å–Ω–∞. "
        f"–î–ª–∏–Ω–∞ —Å–∫–∞–∑–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {words} —Å–ª–æ–≤. "
        f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–ª–∏ HTML, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏."
    )

def generate_story(prompt):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {NEUROAPI_API_KEY}"
    }
    data = {
        "model": MODEL,
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }
    resp = requests.post(NEUROAPI_URL, headers=headers, json=data, timeout=300)
    resp.raise_for_status()
    return resp.json()['choices'][0]['message']['content']

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
def create_image_prompt(state, text_part=None):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if text_part:
        # –ü—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–ª–æ–∫–∞
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', text_part)
        sentences = [s.strip() for s in sentences if s.strip()]
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if len(sentences) >= 2:
            last_sentences = '. '.join(sentences[-2:])
        elif len(sentences) == 1:
            last_sentences = sentences[0]
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ fallback
            last_sentences = text_part[:200]
        
        return f"–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ –¥–µ—Ç—Å–∫–æ–π —Å–∫–∞–∑–∫–µ: {last_sentences} –≤ —Å—Ç–∏–ª–µ –¥–µ—Ç—Å–∫–æ–π –∫–Ω–∏–∂–Ω–æ–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –¥–æ–±—Ä–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"
    else:
        # –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        mood_map = {
            '—Å–ø–æ–∫–æ–π–Ω–æ–µ': '–º–∏—Ä–Ω–∞—è —Å–ø–æ–∫–æ–π–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
            '–≤–æ–ª—à–µ–±–Ω–æ–µ': '–º–∞–≥–∏—á–µ—Å–∫–∞—è –≤–æ–ª—à–µ–±–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å –±–ª–µ—Å—Ç–∫–∞–º–∏',
            '–≤–µ—Å—ë–ª–æ–µ': '—è—Ä–∫–∞—è —Ä–∞–¥–æ—Å—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
            '–ø–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–µ': '–º—É–¥—Ä–∞—è –¥–æ–±—Ä–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
            '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ': '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
            '—Å—Ç—Ä–∞—à–Ω–æ–µ': '–Ω–µ–º–Ω–æ–≥–æ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–æ –Ω–µ –ø—É–≥–∞—é—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'
        }
        mood_desc = mood_map.get(state['mood'], '–¥–æ–±—Ä–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞')
        return f"–¥–µ—Ç—Å–∫–∞—è –∫–Ω–∏–∂–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è: {state['hero']} –≤ –º–µ—Å—Ç–µ {state['place']}, {mood_desc}, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª—å –¥–µ—Ç—Å–∫–æ–π –∫–Ω–∏–≥–∏"

async def generate_image(prompt_text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Yandex Art API —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {prompt_text}")
    
    try:
        global iam_token
        if not iam_token:
            iam_token = fetch_iam_token()
            if not iam_token:
                raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IAM —Ç–æ–∫–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        
        headers = {
            'Authorization': f'Bearer {iam_token}',
            'Content-Type': 'application/json'
        }
        
        data = {
            "modelUri": f"art://{folder_id}/yandex-art/latest",
            "generationOptions": {
                "seed": str(hash(prompt_text) % 10000),
                "aspectRatio": {
                    "widthRatio": "2",
                    "heightRatio": "1"
                }
            },
            "messages": [
                {
                    "text": prompt_text
                }
            ]
        }
        
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt_text[:100]}...")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(YANDEX_ART_URL, headers=headers, json=data) as resp:
                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {resp.status}")
                logging.info(f"Content-Type: {resp.headers.get('Content-Type', 'unknown')}")
                
                if resp.status != 200:
                    error_text = await resp.text()
                    logging.error(f"Art API error (status {resp.status}): {error_text}")
                    raise Exception(f"Art API error (status {resp.status}): {error_text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content_type = resp.headers.get('Content-Type', '').lower()
                if 'image' in content_type or 'application/octet-stream' in content_type:
                    # API –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
                    logging.info("API –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")
                    image_data = await resp.read()
                    logging.info(f"–†–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_data)} –±–∞–π—Ç")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    return await save_image_data(image_data, "—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    
                else:
                    # API –≤–µ—Ä–Ω—É–ª JSON —Å operation_id (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
                    response_text = await resp.text()
                    logging.info(f"–û—Ç–≤–µ—Ç API (JSON): {response_text}")
                    
                    result = await resp.json()
                    operation_id = result['id']
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω operation_id: {operation_id}")
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    check_url = f"{YANDEX_OPERATIONS_URL}/{operation_id}"
                    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ URL: {check_url}")
                    
                    for attempt in range(30):  # –º–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫ (5 –º–∏–Ω—É—Ç)
                        await asyncio.sleep(10)
                        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/30 –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞...")
                        
                        async with session.get(check_url, headers=headers) as check_resp:
                            if check_resp.status != 200:
                                error_text = await check_resp.text()
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (status {check_resp.status}): {error_text}")
                                continue
                                
                            check_result = await check_resp.json()
                            logging.info(f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: {json.dumps(check_result, ensure_ascii=False)}")
                            
                            if check_result.get('done'):
                                logging.info("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                                
                                if 'error' in check_result:
                                    logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {check_result['error']}")
                                    raise Exception(f"Art generation error: {check_result['error']}")
                                
                                if 'response' in check_result:
                                    response_data = check_result['response']
                                    logging.info(f"–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ response —Å –∫–ª—é—á–∞–º–∏: {list(response_data.keys())}")
                                    
                                    if 'image' in response_data:
                                        image_data = response_data['image']
                                        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ image! –¢–∏–ø: {type(image_data)}")
                                        
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                        return await save_image_data(image_data, "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                                    else:
                                        logging.error(f"–ù–µ—Ç –ø–æ–ª—è image –≤ response! –ö–ª—é—á–∏: {list(response_data.keys())}")
                                        raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {check_result}")
                                else:
                                    logging.error("–ù–µ—Ç –±–ª–æ–∫–∞ response –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
                                    raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {check_result}")
                    
                    raise Exception("Timeout waiting for image generation")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logging.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return None

def split_story_into_sentences(story):
    """–†–∞–∑–¥–µ–ª–∏—Ç—å —Å–∫–∞–∑–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    sentences = re.split(r'[.!?]+', story)
    sentences = [s.strip() for s in sentences if s.strip()]
    
    parts = []
    current_part = []
    
    for sentence in sentences:
        current_part.append(sentence)
        if len(current_part) >= 10:
            parts.append('. '.join(current_part) + '.')
            current_part = []
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if current_part:
        parts.append('. '.join(current_part) + '.')
    
    return parts

async def save_image_data(image_data, description="image"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {description}, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(image_data)}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bytes
        if isinstance(image_data, str):
            if image_data.startswith('http'):
                # –≠—Ç–æ URL - —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω URL: {image_data}")
                return await download_image(image_data)
            else:
                # –≠—Ç–æ base64 - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã base64 –¥–∞–Ω–Ω—ã–µ, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º...")
                import base64
                binary_data = base64.b64decode(image_data)
        elif isinstance(image_data, (bytes, bytearray)):
            # –£–∂–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            binary_data = bytes(image_data)
        else:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {type(image_data)}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        if not binary_data:
            logging.error("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return None
        
        logging.info(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(binary_data)} –±–∞–π—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as f:
            f.write(binary_data)
            f.flush()
            temp_path = f.name
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        if os.path.exists(temp_path) and os.path.getsize(temp_path) > 0:
            logging.info(f"{description} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {temp_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(temp_path)} –±–∞–π—Ç")
            return temp_path
        else:
            logging.error(f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π: {temp_path}")
            return None
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {description}: {e}")
        return None

async def download_image(image_url):
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    logging.info(f"–°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {image_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    logging.info(f"–†–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(content)} –±–∞–π—Ç")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    return await save_image_data(content, "—Å–∫–∞—á–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                else:
                    error_text = await resp.text()
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (status {resp.status}): {error_text}")
                    return None
    except Exception as e:
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    reset_user(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º —Å–∫–∞–∑–∫—É. –ö—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω—ã–º –≥–µ—Ä–æ–µ–º?",
        reply_markup=build_keyboard(HEROES)
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–∫–∞–∑–∫—É –Ω–∞ –Ω–æ—á—å —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏! " \
        "–ò—Å–ø–æ–ª—å–∑—É–π /new —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. " \
        "–ò—Å–ø–æ–ª—å–∑—É–π /audio, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–∫–∞–∑–∫–∏."
    )

async def new_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    state = USER_STATE.get(user_id)
    if not state:
        reset_user(user_id)
        state = USER_STATE[user_id]

    step = state['step']
    data = query.data

    if step == 'hero':
        if data == 'custom':
            state['step'] = 'hero_custom'
            await query.edit_message_text("–í–≤–µ–¥–∏ –∏–º—è –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è:")
            return
        state['hero'] = data
        state['step'] = 'place'
        await query.edit_message_text(
            "–ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?",
            reply_markup=build_keyboard(PLACES)
        )
    elif step == 'place':
        if data == 'custom':
            state['step'] = 'place_custom'
            await query.edit_message_text("–í–≤–µ–¥–∏ –º–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è:")
            return
        state['place'] = data
        state['step'] = 'mood'
        await query.edit_message_text(
            "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É —Å–∫–∞–∑–∫–∏?",
            reply_markup=build_keyboard(MOODS)
        )
    elif step == 'mood':
        state['mood'] = data
        state['step'] = 'age'
        await query.edit_message_text(
            "–î–ª—è –∫–æ–≥–æ —ç—Ç–∞ —Å–∫–∞–∑–∫–∞?",
            reply_markup=build_keyboard(AGES)
        )
    elif step == 'age':
        state['age'] = data
        state['step'] = 'length'
        await query.edit_message_text(
            "–ö–∞–∫–æ–π –¥–ª–∏–Ω—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∞–∑–∫–∞?",
            reply_markup=build_keyboard(LENGTHS)
        )
    elif step == 'length':
        state['length'] = data
        state['step'] = 'done'
        await query.edit_message_text("–ì–æ—Ç–æ–≤–ª—é —Å–∫–∞–∑–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await context.bot.send_chat_action(chat_id=query.message.chat_id, action="typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try:
            initial_prompt = create_image_prompt(state)
            logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {initial_prompt}")
            await context.bot.send_chat_action(chat_id=query.message.chat_id, action="upload_photo")
            
            image_path = await generate_image(initial_prompt)
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")
            
            if image_path:
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
                try:
                    with open(image_path, 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=query.message.chat_id, 
                            photo=photo, 
                            caption="üé® –í–æ—Ç –≤–∞—à–∞ —Å–∫–∞–∑–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è..."
                        )
                        logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.unlink(image_path)
                        logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {image_path}")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path}: {e}")
                        
                except Exception as send_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: {send_error}")
                    await context.bot.send_message(chat_id=query.message.chat_id, text="üé® –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–∑–∫—É...")
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                await context.bot.send_message(chat_id=query.message.chat_id, text="üé® –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–∑–∫—É...")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await context.bot.send_message(chat_id=query.message.chat_id, text="üé® –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–∑–∫—É...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–∞–∑–∫—É
        await context.bot.send_chat_action(chat_id=query.message.chat_id, action="typing")
        prompt = get_prompt(state)
        try:
            story = generate_story(prompt)
        except Exception as e:
            await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞–∑–∫—É, –ø—Ä–æ—Å—Ç–∏—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–∑–∫–∏: {e}")
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–∫–∞–∑–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        story_parts = split_story_into_sentences(story)
        await query.edit_message_text("–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è —Å–∫–∞–∑–∫–∞:")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        for i, part in enumerate(story_parts):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–∞—Å—Ç–∏
            await context.bot.send_message(chat_id=query.message.chat_id, text=part)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é)
            try:
                await context.bot.send_chat_action(chat_id=query.message.chat_id, action="upload_photo")
                image_prompt = create_image_prompt(state, part)
                logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏ {i+1}: {image_prompt[:100]}...")
                image_path = await generate_image(image_prompt)
                logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è —á–∞—Å—Ç–∏ {i+1}: {image_path}")
                
                if image_path:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏ {i+1}: {image_path}")
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if i == len(story_parts) - 1:
                            caption = "üé® –ö–æ–Ω–µ—Ü —Å–∫–∞–∑–∫–∏"
                        else:
                            caption = f"üé® –ß–∞—Å—Ç—å {i+2}"
                            
                        with open(image_path, 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=query.message.chat_id, 
                                photo=photo, 
                                caption=caption
                            )
                            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏ {i+1} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.unlink(image_path)
                            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞—Å—Ç–∏ {i+1} —É–¥–∞–ª–µ–Ω: {image_path}")
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path}: {e}")
                            
                    except Exception as send_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–∏ {i+1} –≤ Telegram: {send_error}")
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏ {i+1}")
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏ {i+1}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_STORY[user_id] = story

# --- –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
async def test_image_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="upload_photo")
    try:
        test_prompt = "–¥–µ—Ç—Å–∫–∞—è –∫–Ω–∏–∂–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è: –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä–∞–∫–æ–Ω—á–∏–∫ –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –ª–µ—Å—É, –¥–æ–±—Ä–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞"
        logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_prompt}")
        image_path = await generate_image(test_prompt)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")
        
        if image_path:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            try:
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id, 
                        photo=photo, 
                        caption="üé® –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    )
                    logging.info("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(image_path)
                    logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {image_path}")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path}: {e}")
                    
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: {send_error}")
                await update.message.reply_text(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {send_error}")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
async def debug_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global iam_token
    debug_info = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    debug_info.append(f"YANDEX_FOLDER_ID: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if folder_id else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    debug_info.append(f"NEUROAPI_API_KEY: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if NEUROAPI_API_KEY else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º IAM —Ç–æ–∫–µ–Ω
    if not iam_token:
        iam_token = fetch_iam_token()
    
    if iam_token:
        debug_info.append(f"IAM —Ç–æ–∫–µ–Ω: ‚úÖ –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(iam_token)})")
    else:
        debug_info.append("IAM —Ç–æ–∫–µ–Ω: ‚ùå –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Art API
    if folder_id and iam_token:
        debug_info.append(f"Model URI: art://{folder_id}/yandex-art/latest")
        debug_info.append(f"Art API URL: {YANDEX_ART_URL}")
    
    await update.message.reply_text("\n".join(debug_info))

# --- –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ TTS ---
async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    test_text = (
        "–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –¥–æ–±—Ä–∞—è —Å–∫–∞–∑–∫–∞ –Ω–∞ –Ω–æ—á—å –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞.\n\n"
        "### –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –î—Ä–∞–∫–æ–Ω—á–∏–∫–∞ –ò—Å–∫–æ—Ä–∫–∏\n\n"
        "–í –æ–¥–Ω–æ–º —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥—É—â–µ–≥–æ, –≥–¥–µ –¥–æ–º–∞ –±—ã–ª–∏ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–±–æ—Å–∫—Ä—ë–±—ã, –∞ –ø–æ –Ω–µ–±—É –≤–º–µ—Å—Ç–æ –º–∞—à–∏–Ω –ª–µ—Ç–∞–ª–∏ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –∞—ç—Ä–æ–º–æ–±–∏–ª–∏, –∂–∏–ª-–±—ã–ª –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä–∞–∫–æ–Ω—á–∏–∫. –ó–≤–∞–ª–∏ –µ–≥–æ –ò—Å–∫–æ—Ä–∫–∞. –û–Ω –±—ã–ª —Å–æ–≤—Å–µ–º –Ω–µ —Å—Ç—Ä–∞—à–Ω—ã–π. –í–º–µ—Å—Ç–æ –æ–≥–Ω—è –æ–Ω —É–º–µ–ª –≤—ã–¥—ã—Ö–∞—Ç—å —Ç—ë–ø–ª—ã–µ –º—ã–ª—å–Ω—ã–µ –ø—É–∑—ã—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤–µ—Ç–∏–ª–∏—Å—å –≤—Å–µ–º–∏ —Ü–≤–µ—Ç–∞–º–∏ —Ä–∞–¥—É–≥–∏ –∏ –ø–∞—Ö–ª–∏ –∫–ª—É–±–Ω–∏—á–Ω–æ–π –≥–∞–∑–∏—Ä–æ–≤–∫–æ–π.\n\n"
        "–ñ–∏–ª –ò—Å–∫–æ—Ä–∫–∞ —Å–æ —Å–≤–æ–∏–º–∏ –º–∞–º–æ–π –∏ –ø–∞–ø–æ–π –≤ —É—é—Ç–Ω–æ–π –ø–µ—â–µ—Ä–∫–µ –Ω–∞ —Å–∞–º–æ–π –≤–µ—Ä—à–∏–Ω–µ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∑–¥–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –æ–Ω –ª—é–±–∏–ª —Å–∏–¥–µ—Ç—å –Ω–∞ —Å–≤–æ—ë–º –æ–±–ª–∞—á–Ω–æ–º –±–∞–ª–∫–æ–Ω—á–∏–∫–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≥–æ—Ä–æ–¥ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫–æ —Å–Ω—É. –ê—ç—Ä–æ–º–æ–±–∏–ª–∏ —Ç–∏—Ö–æ–Ω—å–∫–æ –ø–∞—Ä–∫–æ–≤–∞–ª–∏—Å—å –≤ —Å–≤–æ–∏ –≤–æ–∑–¥—É—à–Ω—ã–µ –≥–∞—Ä–∞–∂–∏, —Ä–æ–±–æ—Ç—ã-—Å–∞–¥–æ–≤–Ω–∏–∫–∏ –ø–æ–ª–∏–≤–∞–ª–∏ –ª—É–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞–ª–∏ —Å–≤–µ—Ç–∏—Ç—å—Å—è –≤ —Ç–µ–º–Ω–æ—Ç–µ, –∞ –≤ –æ–∫–Ω–∞—Ö –¥–æ–º–æ–≤ –∑–∞–∂–∏–≥–∞–ª–∏—Å—å –æ–≥–æ–Ω—å–∫–∏-–Ω–æ—á–Ω–∏–∫–∏.\n\n"
        "–°–µ–≥–æ–¥–Ω—è –ò—Å–∫–æ—Ä–∫–µ –±—ã–ª–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–µ—Å–µ–ª–æ. –í–µ—Å—å –¥–µ–Ω—å –æ–Ω –∏–≥—Ä–∞–ª –≤ –¥–æ–≥–æ–Ω—è–ª–∫–∏ —Å –≤–µ—Ç—Ä–æ–º –∏ –∫—É–≤—ã—Ä–∫–∞–ª—Å—è –≤ –ø—É—à–∏—Å—Ç—ã—Ö –æ–±–ª–∞–∫–∞—Ö. –ù–æ –≤–æ—Ç –Ω–∞—Å—Ç—É–ø–∏–ª –≤–µ—á–µ—Ä, –∏ –º–∞–º–∞-–¥—Ä–∞–∫–æ–Ω–∏—Ö–∞ —Å–∫–∞–∑–∞–ª–∞: ¬´–ò—Å–∫–æ—Ä–∫–∞, –ø–æ—Ä–∞ —Å–ø–∞—Ç—å¬ª.\n\n"
        "–ù–æ –¥—Ä–∞–∫–æ–Ω—á–∏–∫—É —Å–æ–≤—Å–µ–º –Ω–µ —Ö–æ—Ç–µ–ª–æ—Å—å —Å–ø–∞—Ç—å! –ï–º—É —Ö–æ—Ç–µ–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±—Ä–æ–µ –∏ –≤–æ–ª—à–µ–±–Ω–æ–µ –¥–ª—è –≤—Å–µ–≥–æ –≥–æ—Ä–æ–¥–∞. –ò –æ–Ω –ø—Ä–∏–¥—É–º–∞–ª!\n\n"
        "–û–Ω —Ç–∏—Ö–æ–Ω—å–∫–æ –≤—ã–ª–µ—Ç–µ–ª —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–ª–∫–æ–Ω–∞, –ø–æ–¥–ª–µ—Ç–µ–ª –∫ –±–æ–ª—å—à–æ–º—É –∫—Ä—É–≥–ª–æ–º—É –æ–∫–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –≥—Ä—É—Å—Ç–∏–ª –º–∞–ª–µ–Ω—å–∫–∏–π –º–∞–ª—å—á–∏–∫, –∏ —Ç–∏—Ö–æ–Ω—å–∫–æ –¥—É–Ω—É–ª. –ü—É—Ö! –ò–∑ –Ω–æ–∑–¥—Ä–µ–π –ò—Å–∫–æ—Ä–∫–∏ –≤—ã–ª–µ—Ç–µ–ª –æ–≥—Ä–æ–º–Ω—ã–π —Ä–∞–¥—É–∂–Ω—ã–π –ø—É–∑—ã—Ä—å. –û–Ω –ø–æ–¥–ø–ª—ã–ª –∫ –æ–∫–Ω—É, –ª–µ–≥–æ–Ω—å–∫–æ —Å—Ç—É–∫–Ω—É–ª—Å—è –æ —Å—Ç–µ–∫–ª–æ –∏ –ª–æ–ø–Ω—É–ª —Å —Ç–∏—Ö–∏–º –∑–≤—É–∫–æ–º ¬´–±—É–ª—å–∫!¬ª, –æ—Å—Ç–∞–≤–∏–≤ –ø–æ—Å–ª–µ —Å–µ–±—è –∑–∞–ø–∞—Ö –∫–ª—É–±–Ω–∏–∫–∏ –∏ —Ä–æ—Å—Å—ã–ø—å –∫—Ä–æ—à–µ—á–Ω—ã—Ö –±–ª—ë—Å—Ç–æ–∫. –ú–∞–ª—å—á–∏–∫ –∑–∞ –æ–∫–Ω–æ–º —É–ª—ã–±–Ω—É–ª—Å—è –∏ –ø–æ–º–∞—Ö–∞–ª –ò—Å–∫–æ—Ä–∫–µ —Ä—É–∫–æ–π.\n\n"
        "–î—Ä–∞–∫–æ–Ω—á–∏–∫ –æ–±—Ä–∞–¥–æ–≤–∞–ª—Å—è –∏ –ø–æ–ª–µ—Ç–µ–ª –¥–∞–ª—å—à–µ. –û–Ω –ø—Ä–æ–ª–µ—Ç–∞–ª –Ω–∞–¥ –ø–∞—Ä–∫–∞–º–∏, –≥–¥–µ —Ä–æ–±–æ—Ç—ã-–Ω—è–Ω–∏ —É–∫–ª–∞–¥—ã–≤–∞–ª–∏ —Å–ø–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–≤–µ—Ä—è—Ç, –∏ –¥–∞—Ä–∏–ª –≤—Å–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–≤–µ—Ç—è—â–µ–º—É—Å—è –ø—É–∑—ã—Ä—é. –í–µ—Å—å –≥–æ—Ä–æ–¥ –Ω–∞–ø–æ–ª–Ω–∏–ª—Å—è –Ω–µ–∂–Ω—ã–º —Å–≤–µ—Ç–æ–º –∏ —Å–ª–∞–¥–∫–∏–º –∞—Ä–æ–º–∞—Ç–æ–º. –í—Å–µ –≤–æ–∫—Ä—É–≥ —É–ª—ã–±–∞–ª–∏—Å—å, –∑–µ–≤–∞–ª–∏ –∏ –ø–æ—Ç–∏—Ö–æ–Ω—å–∫—É –∑–∞—Å—ã–ø–∞–ª–∏.\n\n"
        "–°–¥–µ–ª–∞–≤ —Å–≤–æ–π –±–æ–ª—å—à–æ–π –¥–æ–±—Ä—ã–π –∫—Ä—É–≥, –ò—Å–∫–æ—Ä–∫–∞ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –∏ –µ–≥–æ –≥–ª–∞–∑–∫–∏ —Å—Ç–∞–ª–∏ —Å–ª–∏–ø–∞—Ç—å—Å—è. –û–Ω –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å–≤–æ—é –ø–µ—â–µ—Ä–∫—É, –≥–¥–µ –µ–≥–æ —É–∂–µ –∂–¥–∞–ª–∞ –º–∞–º–∞. –û–Ω–∞ —É–∫—Ä—ã–ª–∞ –µ–≥–æ —Ç—ë–ø–ª—ã–º –∫—Ä—ã–ª–æ–º, –ø–æ—Ü–µ–ª–æ–≤–∞–ª–∞ –≤ –Ω–æ—Å–∏–∫ –∏ –ø—Ä–æ—à–µ–ø—Ç–∞–ª–∞: ¬´–ú–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π –≤–æ–ª—à–µ–±–Ω–∏–∫¬ª.\n\n"
        "–ò—Å–∫–æ—Ä–∫–∞ —É—é—Ç–Ω–æ —Å–≤–µ—Ä–Ω—É–ª—Å—è –∫–∞–ª–∞—á–∏–∫–æ–º, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —É–ª—ã–±–Ω—É–ª—Å—è, –≤—Å–ø–æ–º–∏–Ω–∞—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –ª–∏—Ü–∞ –∂–∏—Ç–µ–ª–µ–π, –∏ —Å–ª–∞–¥–∫–æ-—Å–ª–∞–¥–∫–æ –∑–∞—Å–Ω—É–ª. –ò –µ–º—É –ø—Ä–∏—Å–Ω–∏–ª–∏—Å—å —Å–∞–º—ã–µ —Ä–∞–¥—É–∂–Ω—ã–µ –∏ –∫–ª—É–±–Ω–∏—á–Ω—ã–µ —Å–Ω—ã.\n\n"
        "–ò —Ç–µ–±–µ, –º–∞–ª—ã—à, –ø–æ—Ä–∞ —Å–ø–∞—Ç—å. –ó–∞–∫—Ä—ã–≤–∞–π –≥–ª–∞–∑–∫–∏ –∏ –ø—É—Å—Ç—å —Ç–µ–±–µ –ø—Ä–∏—Å–Ω—è—Ç—Å—è —Ç–∞–∫–∏–µ –∂–µ –¥–æ–±—Ä—ã–µ –∏ –≤–µ—Å—ë–ª—ã–µ —Å–Ω—ã. –°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤"
    )
    await update.message.reply_text("–ì–æ—Ç–æ–≤–ª—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ...")
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.RECORD_VOICE)
    try:
        ogg_path, mp3_path = await synthesize_tts(test_text, folder_id)
        with open(ogg_path, 'rb') as voice:
            await context.bot.send_voice(chat_id=update.effective_chat.id, voice=voice)
        if mp3_path and os.path.exists(mp3_path):
            with open(mp3_path, 'rb') as audio:
                await context.bot.send_audio(chat_id=update.effective_chat.id, audio=audio, filename='test.mp3')
    except Exception as e:
        if str(e) == 'TTS_TEXT_TOO_LONG':
            await update.message.reply_text("–≠—Ç–∞ —Å–∫–∞–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –Ø –Ω–µ —Å–º–æ–≥—É –µ–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.")
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")

async def synthesize_tts(text, folder_id):
    global iam_token
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω
    if not iam_token:
        iam_token = fetch_iam_token()
        if not iam_token:
            raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IAM —Ç–æ–∫–µ–Ω')
    url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
    headers = {
        'Authorization': 'Bearer ' + iam_token,
    }
    data = {
        'text': text,
        'lang': 'ru-RU',
        'voice': 'jane',
        'emotion': 'good',
        'folderId': folder_id,
        'format': 'oggopus',
        'sampleRateHertz': 48000
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data=data) as resp:
            if resp.status != 200:
                err_text = await resp.text()
                if 'Requested text length exceed limitation' in err_text:
                    raise Exception('TTS_TEXT_TOO_LONG')
                raise Exception(f"TTS error: {err_text}")
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as f:
                content = await resp.read()
                if not content:
                    raise Exception("TTS API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
                f.write(content)
                ogg_path = f.name
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è oggopus -> mp3 —á–µ—Ä–µ–∑ ffmpeg
    mp3_path = ogg_path.replace('.ogg', '.mp3')
    try:
        result = subprocess.run([
            'ffmpeg', '-y', '-i', ogg_path, '-acodec', 'libmp3lame', mp3_path
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode != 0 or not os.path.exists(mp3_path):
            logging.error(f"ffmpeg error: {result.stderr.decode('utf-8')}")
            mp3_path = None
    except Exception as e:
        logging.error(f"ffmpeg exception: {e}")
        mp3_path = None
    return ogg_path, mp3_path

# --- –ö–æ–º–∞–Ω–¥–∞ /audio ---
async def audio_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    story = USER_STORY.get(user_id)
    state = USER_STATE.get(user_id)
    if not story:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–∫–∞–∑–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ /new.")
        return
    await update.message.reply_text("–ì–æ—Ç–æ–≤–ª—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.RECORD_VOICE)
    try:
        if state and state.get('length') == 'long':
            mid = len(story) // 2
            split_idx = story.rfind('.', 0, mid)
            if split_idx == -1:
                split_idx = story.rfind(' ', 0, mid)
            if split_idx == -1:
                split_idx = mid
            part1 = story[:split_idx+1].strip()
            part2 = story[split_idx+1:].strip()
            ogg_path1, _ = await synthesize_tts(part1, folder_id)
            with open(ogg_path1, 'rb') as voice1:
                await context.bot.send_voice(chat_id=update.effective_chat.id, voice=voice1)
            ogg_path2, _ = await synthesize_tts(part2, folder_id)
            with open(ogg_path2, 'rb') as voice2:
                await context.bot.send_voice(chat_id=update.effective_chat.id, voice=voice2)
        else:
            ogg_path, _ = await synthesize_tts(story, folder_id)
            with open(ogg_path, 'rb') as voice:
                await context.bot.send_voice(chat_id=update.effective_chat.id, voice=voice)
    except Exception as e:
        if str(e) == 'TTS_TEXT_TOO_LONG':
            await update.message.reply_text("–≠—Ç–∞ —Å–∫–∞–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –Ø –Ω–µ —Å–º–æ–≥—É –µ–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.")
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ –∞—É–¥–∏–æ: {e}")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = USER_STATE.get(user_id)
    if not state:
        return
    step = state['step']
    text = update.message.text.strip()
    if step == 'hero_custom':
        state['hero'] = text
        state['step'] = 'place'
        await update.message.reply_text(
            "–ì–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?",
            reply_markup=build_keyboard(PLACES)
        )
    elif step == 'place_custom':
        state['place'] = text
        state['step'] = 'mood'
        await update.message.reply_text(
            "–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É —Å–∫–∞–∑–∫–∏?",
            reply_markup=build_keyboard(MOODS)
        )

# --- Main ---
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞
    schedule_iam_token_update()
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('new', new_cmd))
    app.add_handler(CommandHandler('audio', audio_cmd))
    app.add_handler(CommandHandler('test', test_cmd))
    app.add_handler(CommandHandler('testimg', test_image_cmd))
    app.add_handler(CommandHandler('debug', debug_cmd))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == '__main__':
    main()
